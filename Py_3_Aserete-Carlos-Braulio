{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMeAylWw0Y6RMUla0Pj2sph",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/laxhidualopez06/Py---1--Laxhidua/blob/main/JuevesLab.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Jueves Lab 18/09/2025**"
      ],
      "metadata": {
        "id": "6ZDYw5tqKIS1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Equipo:\n",
        "\n",
        "\n",
        "*   Aseret Laxhidua López Castillejos\n",
        "*   Carlos Mihael Gallegos Hernández\n",
        "*   Braulio Aldhair Rodríguez Espinosa"
      ],
      "metadata": {
        "id": "sv018-Kzyg5Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#################### LISTAS #######################\n",
        "###### 1.CREACIÓN DE LISTAS #######\n",
        "\n",
        "# 1. Lista vacía\n",
        "lista_vacia = []\n",
        "lista_vacia2 = list()\n",
        "\n",
        "# 2. Lista con elementos\n",
        "frutas = [\"manzana\", \"banana\", \"cereza\"]\n",
        "numeros = [1, 2, 3, 4, 5]\n",
        "mixta = [\"texto\", 42,3.14, True]\n",
        "\n",
        "print(\"Lista vacia:\", lista_vacia)\n",
        "print(\"Frutas:\", frutas)\n",
        "print(\"Números:\", numeros)\n",
        "\n",
        "######## 2.INSERCIONES Y ACTUALIZACIONES #########\n",
        "frutas.append(\"naranja\")\n",
        "print(\"Despues de insert:\", frutas)\n",
        "\n",
        "frutas.extend([\"mango\",\"piña\"])\n",
        "print(\"Despues de extend\", frutas)\n",
        "\n",
        "frutas[0] = \"manzana verde\"\n",
        "print(\"Despues de actualizar:\", frutas)\n",
        "\n",
        "######### 3.BORRADOS ########\n",
        "frutas.remove(\"banana\")\n",
        "print(\"Despues de remove:\", frutas)\n",
        "\n",
        "elemento_eliminado = frutas.pop(2)\n",
        "print(f\"Elemento eliminado: {elemento_eliminado}\")\n",
        "print(\"Despues de pop:\", frutas)\n",
        "\n",
        "ultimo = frutas.pop()\n",
        "print(f\"Ultimo elemento eliminado: {ultimo}\")\n",
        "print(\"Despues de pop():\", frutas)\n",
        "\n",
        "frutas.clear()\n",
        "print(\"Despues de clear:\", frutas)\n",
        "\n",
        "######## 4.ACCESO A LAS LISTAS #########\n",
        "frutas = [\"manzana\", \"banana\", \"cereza\", \"naranja\", \"uva\", \"mango\"]\n",
        "\n",
        "# La forma de acceder a los elementos de una lista es con el operador [inicio:fin]. Indicando el inicio de elementos que quieres de la lista\n",
        "# y fin indica el elemento - 1 que va recoger de la lista. Los indices empiezan en 0.\n",
        "print(\"primer elemento:\", frutas[0])\n",
        "print(\"segundo elemento:\", frutas[1])\n",
        "print(\"ultimo elemento:\", frutas[-1])\n",
        "print(\"penultimo elemento:\", frutas[-2])\n",
        "\n",
        "print(\"Primeros 3 elementos:\", frutas[0:3])\n",
        "print(\"Desde indice 2:\", frutas[2:])\n",
        "print(\"Hasta indice 4:\", frutas[:4])\n",
        "print(\"Cada dos elementos\", frutas[::2])"
      ],
      "metadata": {
        "id": "bjWTGDJCKPe9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "53cdda84-ec2e-45ba-e60a-527c455aff4a"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lista vacia: []\n",
            "Frutas: ['manzana', 'banana', 'cereza']\n",
            "Números: [1, 2, 3, 4, 5]\n",
            "Despues de insert: ['manzana', 'banana', 'cereza', 'naranja']\n",
            "Despues de extend ['manzana', 'banana', 'cereza', 'naranja', 'mango', 'piña']\n",
            "Despues de actualizar: ['manzana verde', 'banana', 'cereza', 'naranja', 'mango', 'piña']\n",
            "Despues de remove: ['manzana verde', 'cereza', 'naranja', 'mango', 'piña']\n",
            "Elemento eliminado: naranja\n",
            "Despues de pop: ['manzana verde', 'cereza', 'mango', 'piña']\n",
            "Ultimo elemento eliminado: piña\n",
            "Despues de pop(): ['manzana verde', 'cereza', 'mango']\n",
            "Despues de clear: []\n",
            "primer elemento: manzana\n",
            "segundo elemento: banana\n",
            "ultimo elemento: mango\n",
            "penultimo elemento: uva\n",
            "Primeros 3 elementos: ['manzana', 'banana', 'cereza']\n",
            "Desde indice 2: ['cereza', 'naranja', 'uva', 'mango']\n",
            "Hasta indice 4: ['manzana', 'banana', 'cereza', 'naranja']\n",
            "Cada dos elementos ['manzana', 'cereza', 'uva']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##################### SETS ########################\n",
        "# 1.CREACIÓN DE SETS\n",
        "\n",
        "#  set vacío\n",
        "newset = set()\n",
        "\n",
        "# Inicializar un set con elementos\n",
        "newset = {'uno' ,'dos','tres','cuatro','cinco'}\n",
        "\n",
        "#2.INSERTAR Y ACTUALIZAR\n",
        "\n",
        "#A diferencia de .add(), que solo agrega un elemento, .update() puede agregar muchos de una vez.\n",
        "newset.update({'cinco','seis','siete'})#Es un método de los sets que sirve para agregar múltiples elementos desde otra colección (otro set, lista, tupla, etc.).\n",
        "copia_set = newset.copy()#Es un método que crea una copia superficial del set.\n",
        "# 3.BORRADOS\n",
        "copia_set.discard('uno')\n",
        "\n",
        "#MANIPULACION\n",
        "# 4.OPERACIONES DE SETS\n",
        "setUno = {1,2,3,4,5,6,7,8,9,10}\n",
        "setDos = {10,2,11,12,13,14,15,16,17,18}\n",
        "\n",
        "# los siguientes metodos devuelven un conjunto nuevo\n",
        "\n",
        "setUno.union(setDos)\n",
        "setUno.intersection(setDos)\n",
        "setUno.difference(setDos)\n",
        "\n",
        "# Diferencia Simetrica\n",
        "\n",
        "setUno.symmetric_difference(setDos)\n",
        "\n",
        "################### 5.ACCESO A LOS SETS #####################\n",
        "\n",
        "#No hay una forma de acceder de forma indexada\n",
        "\n",
        "\n",
        "# RECORRER\n",
        "# Recorrer setUno\n",
        "for elemento in setUno:\n",
        "    print(elemento)\n",
        "\n",
        "# Recorrer setDos\n",
        "for elemento in setDos:\n",
        "    print(elemento)\n"
      ],
      "metadata": {
        "id": "J4DJFEbDKWUl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ef0f91ae-6f12-4d66-b337-3a3afd633aef"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n",
            "2\n",
            "10\n",
            "11\n",
            "12\n",
            "13\n",
            "14\n",
            "15\n",
            "16\n",
            "17\n",
            "18\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#################### TUPLAS #######################\n",
        "\n",
        "###### 1. CREACIÓN DE TUPLAS #######\n",
        "\n",
        "# 1. Tupla vacía\n",
        "nuevaTupla = ()\n",
        "\n",
        "# 2. Inicializar una tupla con elementos\n",
        "tuplaUno = (1, 2, 3, 4)\n",
        "tuplaDos = ('a', 'b', 'c')\n",
        "\n",
        "##### 2. INSERTAR Y ACTUALIZAR #####\n",
        "# No se pueden modificar directamente (son inmutables)\n",
        "# Pero podemos crear una nueva tupla a partir de otra\n",
        "nuevaTupla = nuevaTupla + ('x', 'y')\n",
        "copiaTupla = tuplaUno + (5,)\n",
        "\n",
        "###### 3. BORRADOS #####\n",
        "# No existe remove() ni pop() en tuplas\n",
        "# Pero se puede “simular” creando una nueva tupla sin cierto elemento\n",
        "tuplaFiltrada = tuple(x for x in tuplaUno if x != 2)\n",
        "\n",
        "######4. OPERACIONES DE TUPLAS #####\n",
        "concatenada = tuplaUno + tuplaDos\n",
        "repetida = tuplaDos * 2\n",
        "existe = 3 in tuplaUno   # devuelve True/False\n",
        "longitud = len(tuplaUno)\n",
        "\n",
        "###### 5. ACCESO A LAS TUPLAS ######\n",
        "# Acceder por índice\n",
        "primerElemento = tuplaUno[0]\n",
        "ultimoElemento = tuplaUno[-1]\n",
        "\n",
        "# Recorrer con un for\n",
        "for elemento in tuplaDos:\n",
        "    elemento  # cada iteración muestra el valor\n"
      ],
      "metadata": {
        "id": "XOzkYR13KZoN"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nuevaTupla"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b5O1rl_21IAr",
        "outputId": "e0abc6d0-ea07-4e11-d0cd-01c2c37b5444"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('x', 'y')"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "copiaTupla"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KdmRnm-k1H9P",
        "outputId": "6d56bf4d-f987-45b2-b403-73e19a0a5d1f"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1, 2, 3, 4, 5)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tuplaFiltrada"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ajuY455A1H62",
        "outputId": "4c40f45e-1cf2-412d-b64a-581d3cff5d3e"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1, 3, 4)"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "concatenada"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ie7Ft5-b1H4W",
        "outputId": "acfe9994-6755-4db6-e000-62d0d1d8d0e3"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1, 2, 3, 4, 'a', 'b', 'c')"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "repetida"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r6erOnLK1Hub",
        "outputId": "de16b775-9ed4-470f-c757-1a19739ab94d"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('a', 'b', 'c', 'a', 'b', 'c')"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "existe"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qLyLkGRd1Hak",
        "outputId": "24e5356c-285d-4e75-e4cb-4671d9e7c397"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "longitud"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GZfBGSMw1cO2",
        "outputId": "9a423519-a93e-4950-bcef-d402674ca404"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "primerElemento"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mF61lzCb1gPL",
        "outputId": "086957a7-9178-46ea-e2d9-cc459c6b063a"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ultimoElemento"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "30LKw_z_1izk",
        "outputId": "e9d770ee-34f3-4184-e0bb-4f01767b84b9"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "elemento"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "a7a0jDPX1kbZ",
        "outputId": "ca5b2488-476f-4946-9ffe-7c7c01dad32f"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'c'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "################### DICCIONARIOS ###################\n",
        "\n",
        "######1. CREACIÓN DE DICCIONARIOS ######\n",
        "\n",
        "# 1. Diccionario vacío\n",
        "nuevoDic = {}\n",
        "\n",
        "# 2. Inicializar un diccionario con elementos\n",
        "dicUno = {\"nombre\": \"Ana\", \"edad\": 20}\n",
        "dicDos = {\"ciudad\": \"CDMX\", \"pais\": \"México\"}\n",
        "\n",
        "####### 2. INSERTAR Y ACTUALIZAR ######\n",
        "# Insertar nuevos pares clave-valor\n",
        "nuevoDic.update({\"color\": \"rojo\", \"tamaño\": \"mediano\"})\n",
        "\n",
        "# Copiar diccionario\n",
        "copiaDic = dicUno.copy()\n",
        "\n",
        "###### 3. BORRADOS #######\n",
        "# Eliminar una clave específica\n",
        "copiaDic.pop(\"edad\", None)   # None evita error si no existe la clave\n",
        "\n",
        "###### 4. OPERACIONES DE DICCIONARIOS ######\n",
        "# Unir claves de ambos diccionarios\n",
        "clavesUnidas = list(dicUno.keys()) + list(dicDos.keys())\n",
        "\n",
        "# Unir valores de ambos diccionarios\n",
        "valoresUnidos = list(dicUno.values()) + list(dicDos.values())\n",
        "\n",
        "# Saber si existe una clave\n",
        "existeClave = \"nombre\" in dicUno\n",
        "\n",
        "# Obtener la longitud\n",
        "longitudDic = len(dicUno)\n",
        "\n",
        "####### 5. ACCESO A LOS DICCIONARIOS ######\n",
        "# Acceder por clave\n",
        "valorNombre = dicUno[\"nombre\"]\n",
        "\n",
        "# Recorrer con un for (clave y valor)\n",
        "for clave, valor in dicDos.items():\n",
        "    clave, valor   # cada iteración muestra la clave y el valor\n"
      ],
      "metadata": {
        "id": "SoWDo803Kb1l"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nuevoDic"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RzOKm-9d2TqI",
        "outputId": "0c585b14-adae-4e54-c7ca-151b2a6bde1b"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'color': 'rojo', 'tamaño': 'mediano'}"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "copiaDic"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t-VoY6m52Wl3",
        "outputId": "f78f9788-fa8d-4a17-e776-8dd1bb7372fe"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'nombre': 'Ana'}"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clavesUnidas"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "23JEF8YA2Y7b",
        "outputId": "35e9bf47-87c3-4db6-a08b-901def210219"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['nombre', 'edad', 'ciudad', 'pais']"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "valoresUnidos"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jfdpfJxt2ci2",
        "outputId": "7e905ddc-6a85-4d4d-ebb7-7468cefe91eb"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Ana', 20, 'CDMX', 'México']"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "existeClave"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NcHM0ZMD2fat",
        "outputId": "1d76ee42-14b9-4592-c1df-fcadf2183eba"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "longitudDic"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jk4eq2JP2jGF",
        "outputId": "edbed9c7-fecd-4e09-f371-fd90c0afc787"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "valorNombre"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "MXzOWbPp2qWb",
        "outputId": "40713c9e-2466-4eed-951b-23723fcdd20f"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Ana'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clave, valor"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BDpBavzX2u0O",
        "outputId": "41d2396d-98f0-4a39-8aff-5ce00b8d69b7"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('pais', 'México')"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    }
  ]
}
